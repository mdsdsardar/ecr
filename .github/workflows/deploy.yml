name: Deploy to ECS

on:
  workflow_dispatch:
  #push:
    #branches:
      #- main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli jq

    - name: Log in to AWS ECR
      env:
        AWS_REGION: ap-south-1
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region $AWS_REGION
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 556864637241.dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Capture Previous Task Definition
      id: capture_previous_td
      env:
        AWS_REGION: ap-south-1
        TEST_CLUSTER_NAME: test-cluster
        TEST_SERVICE_NAME: test-service
      run: |
        PREVIOUS_TASK_DEF_ARN=$(aws ecs describe-services --cluster $TEST_CLUSTER_NAME --services $TEST_SERVICE_NAME --query 'services[0].taskDefinition' --output text)
        echo "previous_task_def_arn=$PREVIOUS_TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Deploy to ECS Test Environment.
      env:
        AWS_REGION: ap-south-1
        TEST_CLUSTER_NAME: test-cluster
        TEST_SERVICE_NAME: test-service
        TASK_FAMILY: saad-td
        CONTAINER_NAME: wp
        IMAGE_URL: 556864637241.dkr.ecr.ap-south-1.amazonaws.com/saad-ecr:latest
      run: |
        # Get the latest revision of the task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)        
        # Update the task definition with the new image and remove unnecessary fields
        NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE_URL "$IMAGE_URL" --arg CONTAINER_NAME "$CONTAINER_NAME" --arg FAMILY "$TASK_FAMILY" '
          .taskDefinition |
          .containerDefinitions[0].image = $IMAGE_URL |
          .family = $FAMILY |
          del(.status, .taskDefinitionArn, .revision, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .taskDefinitionArn)')
        echo "$NEW_TASK_DEF" > new-task-def.json

        # Register the new task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)

        # Update the ECS service to use the new task definition revision
        aws ecs update-service \
          --cluster $TEST_CLUSTER_NAME \
          --service $TEST_SERVICE_NAME \
          --task-definition $NEW_TASK_DEF_ARN \
          --force-new-deployment
          
        # Set the output for the task definition ARN
        echo "new_task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

        # Update service with new task definition
        aws ecs update-service --cluster $TEST_CLUSTER_NAME --service $TEST_SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --force-new-deployment

        # Wait for service to stabilize
        aws ecs wait services-stable --cluster $TEST_CLUSTER_NAME --services $TEST_SERVICE_NAME

    - name: Run Integration Tests
      run: |
        # Add your integration test commands here
        echo "Running integration tests..."
        #curl -f http://your-test-endpoint/health || exit 1
        # Simulate test pass/failure
        exit 0 # Change this to exit 1 to simulate a failure

    - name: Rollback Test Environment
      if: failure()
      env:
        AWS_REGION: ap-south-1
        TEST_CLUSTER_NAME: test-cluster
        TEST_SERVICE_NAME: test-service
        PREVIOUS_TASK_DEF_ARN: ${{ env.previous_task_def_arn }}
        NEW_TASK_DEF_ARN: ${{ env.new_task_def_arn }}
      run: |
        # Rollback to the previous task definition in the test environment
        aws ecs update-service --cluster $TEST_CLUSTER_NAME --service $TEST_SERVICE_NAME --task-definition $PREVIOUS_TASK_DEF_ARN --force-new-deployment
        
        # Wait for the rollback deployment to complete
        aws ecs wait services-stable --cluster $TEST_CLUSTER_NAME --services $TEST_SERVICE_NAME
        
        # Delete the newly created task definition
        aws ecs deregister-task-definition --task-definition $NEW_TASK_DEF_ARN
      
    - name: Deploy to Production
      if: success()
      env:
        AWS_REGION: ap-south-1
        CLUSTER_NAME: saad-cluster
        SERVICE_NAME: saad-service
        NEW_TASK_DEF_ARN: ${{ env.new_task_def_arn }}
      run: |
        # Deploy to production if tests pass
        aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --force-new-deployment
